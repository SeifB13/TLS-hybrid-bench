#!/bin/bash
# Script de vÃ©rification de l'installation TLS-hybrid-bench
# Usage: ./verify_installation.sh
# Auteur: SeifB13

set -e

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

success() { echo -e "${GREEN}âœ“${NC} $1"; }
error() { echo -e "${RED}âœ—${NC} $1"; }
warning() { echo -e "${YELLOW}âš ${NC} $1"; }
info() { echo -e "${BLUE}â„¹${NC} $1"; }

# Configuration
INSTALL_PREFIX="$HOME/ossl-3.5"
OQS_PREFIX="$HOME/oqs"
PYTHON_ENV="$HOME/pqc-bench-env"

echo "=========================================="
echo "  VÃ©rification Installation TLS-hybrid-bench"
echo "=========================================="

# Test 1: Fichiers OpenSSL
info "1. VÃ©rification des fichiers OpenSSL..."
if [[ -x "$INSTALL_PREFIX/bin/openssl" ]]; then
    success "ExÃ©cutable OpenSSL trouvÃ©"
    version=$("$INSTALL_PREFIX/bin/openssl" version)
    info "   Version: $version"
else
    error "ExÃ©cutable OpenSSL manquant: $INSTALL_PREFIX/bin/openssl"
    exit 1
fi

# Test 2: BibliothÃ¨ques liboqs
info "2. VÃ©rification de liboqs..."
if [[ -f "$OQS_PREFIX/lib/liboqs.so" ]]; then
    success "BibliothÃ¨que liboqs trouvÃ©e"
else
    error "BibliothÃ¨que liboqs manquante: $OQS_PREFIX/lib/liboqs.so"
    exit 1
fi

# Test 3: OQS Provider
info "3. VÃ©rification d'OQS Provider..."
if [[ -f "$INSTALL_PREFIX/lib64/ossl-modules/oqsprovider.so" ]]; then
    success "OQS Provider trouvÃ©"
else
    error "OQS Provider manquant: $INSTALL_PREFIX/lib64/ossl-modules/oqsprovider.so"
    exit 1
fi

# Test 4: Configuration OpenSSL
info "4. VÃ©rification de la configuration..."
if [[ -f "$INSTALL_PREFIX/ssl/openssl.cnf" ]]; then
    success "Fichier de configuration trouvÃ©"
    if grep -q "oqsprovider" "$INSTALL_PREFIX/ssl/openssl.cnf"; then
        success "OQS Provider configurÃ©"
    else
        error "OQS Provider non configurÃ© dans openssl.cnf"
        exit 1
    fi
else
    error "Fichier de configuration manquant"
    exit 1
fi

# Test 5: Variables d'environnement
info "5. Test de l'environnement..."
export LD_LIBRARY_PATH="$INSTALL_PREFIX/lib64:$LD_LIBRARY_PATH"
export OPENSSL_MODULES="$INSTALL_PREFIX/lib64/ossl-modules"
export OPENSSL_CONF="$INSTALL_PREFIX/ssl/openssl.cnf"
export PATH="$INSTALL_PREFIX/bin:$PATH"

# Test 6: Providers chargÃ©s
info "6. Test des providers..."
if openssl list -providers | grep -q "oqsprovider"; then
    success "OQS Provider chargÃ© avec succÃ¨s"
    openssl list -providers | while read line; do
        info "   $line"
    done
else
    error "OQS Provider non chargÃ©"
    info "Debug: Tentative de chargement manuel..."
    openssl list -providers -provider oqsprovider 2>&1 | head -5
    exit 1
fi

# Test 7: Algorithmes post-quantiques
info "7. Test des algorithmes ML-KEM..."
if openssl list -kem-algorithms | grep -q "ML-KEM"; then
    success "Algorithmes ML-KEM disponibles"
    openssl list -kem-algorithms | grep "ML-KEM" | while read line; do
        info "   $line"
    done
else
    error "Algorithmes ML-KEM non disponibles"
    exit 1
fi

# Test 8: Groupes hybrides TLS
info "8. Test des groupes TLS hybrides..."
if openssl list -groups | grep -i "mlkem" | head -1 >/dev/null; then
    success "Groupes hybrides disponibles"
    openssl list -groups | grep -i "mlkem" | while read line; do
        info "   $line"
    done
else
    error "Groupes hybrides non disponibles"
    exit 1
fi

# Test 9: Environnement Python
info "9. Test de l'environnement Python..."
if [[ -d "$PYTHON_ENV" ]]; then
    success "Environnement Python trouvÃ©"
    source "$PYTHON_ENV/bin/activate"
    
    # Test des imports
    if python -c "import pandas, matplotlib, seaborn, numpy, tqdm" 2>/dev/null; then
        success "DÃ©pendances Python OK"
    else
        error "DÃ©pendances Python manquantes"
        info "RÃ©installation recommandÃ©e: pip install pandas matplotlib seaborn numpy tqdm"
    fi
    
    deactivate
else
    error "Environnement Python manquant: $PYTHON_ENV"
    exit 1
fi

# Test 10: Scripts d'activation
info "10. Test des scripts d'activation..."
if [[ -x "$HOME/activate_oqs_env.sh" ]]; then
    success "Script OpenSSL disponible: ~/activate_oqs_env.sh"
else
    warning "Script d'activation OpenSSL manquant"
fi

if [[ -x "$HOME/activate_python_env.sh" ]]; then
    success "Script Python disponible: ~/activate_python_env.sh"
else
    warning "Script d'activation Python manquant"
fi

# Test 11: Certificats de test
info "11. Test des certificats..."
CERT_DIR="$HOME/Memoire_M2/tls-test"
if [[ -f "$CERT_DIR/server.crt" && -f "$CERT_DIR/server.key" ]]; then
    success "Certificats de test prÃ©sents"
    
    # Validation du certificat
    if openssl x509 -in "$CERT_DIR/server.crt" -noout -text | grep -q "localhost"; then
        success "Certificat valide pour localhost"
    else
        warning "Certificat invalide ou mal configurÃ©"
    fi
else
    warning "Certificats de test manquants dans $CERT_DIR"
    info "GÃ©nÃ©rez-les avec: openssl req -x509 -new -nodes -days 30 -newkey rsa:3072 -keyout server.key -out server.crt -subj '/CN=localhost'"
fi

# Test 12: ConnectivitÃ© (si serveur actif)
info "12. Test de connectivitÃ© (optionnel)..."
if nc -z localhost 4433 2>/dev/null; then
    info "Serveur TLS dÃ©tectÃ© sur le port 4433"
    
    # Test connexion hybride
    if timeout 3 openssl s_client -connect localhost:4433 -groups X25519MLKEM768 -brief >/dev/null 2>&1; then
        success "Connexion hybride TLS rÃ©ussie"
    else
        warning "Connexion hybride Ã©chouÃ©e (serveur peut Ãªtre occupÃ©)"
    fi
else
    info "Pas de serveur TLS actif (normal si non dÃ©marrÃ©)"
fi

echo ""
echo "=========================================="
echo "   RÃ‰SULTAT DE LA VÃ‰RIFICATION"
echo "=========================================="

# RÃ©sumÃ© des composants
echo "ğŸ“¦ Composants installÃ©s:"
echo "   â€¢ OpenSSL: $($INSTALL_PREFIX/bin/openssl version)"
echo "   â€¢ liboqs: $(ls -la $OQS_PREFIX/lib/liboqs.so 2>/dev/null | awk '{print $5}' | numfmt --to=iec)B"
echo "   â€¢ OQS Provider: ChargÃ© avec succÃ¨s"
echo "   â€¢ Python: $(python3 --version 2>/dev/null || echo 'Non dÃ©tectÃ©')"

echo ""
echo "ğŸš€ PrÃªt pour les benchmarks TLS hybrides !"
echo ""
echo "Commandes de dÃ©marrage rapide:"
echo "   source ~/activate_oqs_env.sh && source ~/activate_python_env.sh"
echo "   python src/tls_benchmark/measure_tls.py --iterations 100"
echo ""

success "VÃ©rification complÃ¨te terminÃ©e avec succÃ¨s !"
